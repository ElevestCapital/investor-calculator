---
function familyQuestionnaireform() {
    function priceToNumber(price: string) {
        return Number(price.replace(/,/g, ''));
    }

    return {
        value: {
            numberOfProperties: '',
            monthlyCashflow: '',
            totalValue: '',
            totalOwed: '',
        },
        step: 1,
        isValid: false,
        init() {
            // @ts-ignore
            const self = this as this & {
                $watch: (key: string, cb: () => void) => void;
            };
            self.$watch('value.numberOfProperties', () => self.validate());
            self.$watch('value.monthlyCashflow', () => self.validate());
            self.$watch('value.totalValue', () => self.validate());
            self.$watch('value.totalOwed', () => self.validate());
            self.$watch('step', () => self.validate());
            self.validate();
        },
        validate() {
            if (this.step === 1) {
                this.isValid = this.value.numberOfProperties.trim() !== '';
            } else if (this.step === 2) {
                this.isValid = this.value.monthlyCashflow.trim() !== '';
            } else if (this.step === 3) {
                this.isValid = this.value.totalValue.trim() !== '';
            } else if (this.step === 4) {
                this.isValid = this.value.totalOwed.trim() !== '';
            } else {
                this.isValid = false;
            }
        },
        submit() {
            window.location.href = `/family-calculation-results?numberOfProperties=${this.value.numberOfProperties}&monthlyCashflow=${priceToNumber(this.value.monthlyCashflow)}&totalValue=${priceToNumber(this.value.totalValue)}&totalOwed=${priceToNumber(this.value.totalOwed)}`;
        },
        nextStep() {
            if (this.isValid) this.step += 1;
        },
        back() {
            this.step -= 1;
        },
    };
}
---

<div class="card">
    <form class="form" x-data={familyQuestionnaireform}>
        <slot />
    </form>
</div>
<style lang="scss">
    .background {
        position: absolute;
        width: 32rem;
        height: 30rem;
        z-index: -1;
        overflow: hidden;
        animation: var(--animation-grow-strong);
        animation-delay: 0.4s;
    }
    .card {
        background-color: var(--color-teal-dark);
        width: 25rem;
        color: var(--color-neutral-light);
        padding: 2.5rem;
        border-radius: 1rem;
        overflow: hidden;
        flex-grow: 1;
        transition: var(--transition);
    }
    .card:hover {
        transform: scale(1.01);
    }
    .form {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }
</style>
